<!-- Show the chat chamber details -->
<div class="container mt-4">
  <div class="row justify-content-center">
    <div class="col-md-8">
      <div class="card shadow">
        <div class="card-body">
          <% if @chat_chamber.avatar.attached? %>
            <%= image_tag @chat_chamber.avatar, class: 'card-img-top img-fluid rounded-circle mx-auto d-block', style: 'width: 150px; height: 150px;' %>
          <% else %>
            <%= image_tag 'chat_chamber_avatar.png', class: 'card-img-top img-fluid rounded-circle mx-auto d-block', style: 'width: 150px; height: 150px;' %>
          <% end %>
          <h1 class="card-title text-center"><%= @chat_chamber.name %></h1>
          <p class="text-muted text-center"><%= @chat_chamber.description %></p>
          <p class="badge bg-secondary"><%= @chat_chamber.category %></p>
          <p class="badge bg-secondary"><%= @chat_chamber.user.uname %></p>
          <% if current_user == @chat_chamber.user %>
            <div class="text-center mt-3">
              <%= button_to 'Update Chat Chamber', edit_chat_chamber_path(@chat_chamber), method: :get, class: 'badge bg-warning', data: { confirm: 'Are you sure you want to update this chat chamber?' } %>
              <%= button_to 'Destroy Chat Chamber', @chat_chamber, method: :delete, class: 'badge bg-danger', data: { confirm: 'Are you sure you want to delete this chat chamber?' } %>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <!-- Chat messages area -->
  <div class="row justify-content-center mt-3">
    <div class="col-md-8">
      <div class="card">
        <div class="card-header">Chat Messages</div>
        <div class="card-body" id="messages" style="height: 400px; overflow-y: scroll;">
          <% @chat_messages.each do |message| %>
            <div class="message mb-2" data-user-id="<%= message.user_id %>">
              <strong><%= message.user.uname %>:</strong>
              <p><%= filter_profanity(message.content) %></p>
            </div>
          <% end %>
        </div>
        <div class="card-footer">
          <textarea id="new-message-content" class="form-control" placeholder="Type your message here..."></textarea>
          <button id="send-message" class="btn btn-primary mt-2">Send Message</button>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
document.addEventListener("turbo:load", function() {
  const chamberId = <%= @chat_chamber.id %>;
  const sendButton = document.getElementById('send-message');
  const messageInput = document.getElementById('new-message-content');
  const messagesContainer = document.getElementById('messages');

  // Function to append a message to the DOM
  function appendMessage(message) {
    const messageElement = document.createElement('div');
    messageElement.className = 'message mb-2';
    messageElement.innerHTML = `<strong>${message.user_uname}:</strong><p>${message.content}</p>`;
    messagesContainer.appendChild(messageElement);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  // Event listener for sending a message
  sendButton.addEventListener('click', function() {
    const messageContent = messageInput.value.trim();
    if (messageContent === "") return;
    sendButton.disabled = true; // Disable the button to prevent multiple submissions

    fetch(`/chat_chambers/${chamberId}/chat_messages`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
      },
      body: JSON.stringify({ chat_message: { content: messageContent, chat_chamber_id: chamberId } })
    })
    .then(response => response.json())
    .then(message => {
      appendMessage(message);
      messageInput.value = ''; // Clear input after sending
      sendButton.disabled = false; // Re-enable the button
    })
    .catch(error => {
      console.error('Error:', error);
      sendButton.disabled = false; // Re-enable the button on error
    });
  });

  // Function to fetch messages and update the message container
  function fetchMessages() {
    fetch(`/chat_chambers/${chamberId}/chat_messages`)
      .then(response => response.text())
      .then(html => {
        messagesContainer.innerHTML = html;
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      })
      .catch(error => console.error('Error fetching messages:', error));
  }

  setInterval(fetchMessages, 500); // Refresh messages every 0.5 seconds
});
</script>
